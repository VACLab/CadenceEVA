"use strict";
define([
    "dojo/_base/declare",
    "dojo/_base/lang",
    "dojo/dom",
    "dojo/dom-style",
    "dojo/on",
    "dijit/registry",
    "dijit/Menu",
    "dijit/MenuItem",
    "dojo/aspect"
], (declare, lang, dom, domStyle, dojoOn, registry, Menu, MenuItem, aspect) => {
    return class {

        // _events should be an array of strings, each string representing an event
        // name for the dispatcher.
        constructor(dom_container_id, _events) {
            // Define a dispatcher.
            this.dispatcher = d3.dispatch.apply(this, _events);

            // Setup an observer to monitor for resize events.
            let container = dom.byId(dom_container_id);
            let this_vis = this;
            var size_observer = new window.ResizeObserver(entries => {
                for (let entry of entries) {
                    let width = Math.floor(entry.contentRect.width);
                    let height = Math.floor(entry.contentRect.height);

                    // A resize handler is required of all subclasses...
                    this_vis.resize(width,height);
                }
            });
            size_observer.observe(container);
        }

        // This should be overridden by subclasses to do the correct thing when the container for this vis is resized.
        // That might be "do nothing" but in that case an overridden resize method to do nothing is required.
        resize(width, height) {
            throw new Error("Subclasses of VaclabVis must implement the resize method.");
        }

        // Allow external objects to register listeners for events generated by this vis (i.e., the events sent to the
        // constructor).
        on(event_name, event_handler) {
            this.dispatcher.on(event_name, event_handler);
        }
    }
});